---
- name: fail if specified ethernet interface not found
  fail:
    msg: "The ethernet interface specified by consul_iface was not found."
  when: consul_iface not in ansible_interfaces

- name: add Consul user
  user:
    name: "{{ consul_user }}"
    comment: "Consul user"
    group: "{{ consul_group }}"
    system: yes

- name: OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  tags: always

- name: create directories
  file:
    dest: "{{ item }}"
    state: directory
    owner: "{{ consul_user }}"
    group: "{{ consul_group}}"
  with_items:
    - /opt/consul
    - /var/lib/consul
    - /var/log/consul
    - /var/run/consul
    - /etc/consul.d
    - /etc/consul.d/bootstrap
    - /etc/consul.d/client
    - /etc/consul.d/server

- name: ensure bin path exists
  file:
    path: "{{ consul_bin_path }}"
    state: directory
    owner: root
    mode: 0755

- name: install OS packages and consul
  include: install.yml

#- include: ../tasks/encrypt_gossip.yml

- name: select Consul network interface for Linux
  set_fact:
    consul_bind_address: "{{ hostvars[inventory_hostname]['ansible_'+ consul_iface ]['ipv4']['address'] }}"
  when: ansible_os_family == "Linux"

- name: write bootstrap configuration
  template:
    src: config_bootstrap.json.j2
    dest: "{{ consul_config_path }}/bootstrap/config.json"
    owner: "{{ consul_user }}"
    group: "{{ consul_group}}"
  notify:
    - restart consul

- name: write client configuration
  template:
    src: config_client.json.j2
    dest: "{{ consul_config_path }}/client/config.json"
    owner: "{{ consul_user }}"
    group: "{{ consul_group}}"
  notify:
    - restart consul

- name: write server configuration
  template:
    src: config_server.json.j2
    dest: "{{ consul_config_path }}/server/config.json"
    owner: "{{ consul_user }}"
    group: "{{ consul_group}}"
  notify:
    - restart consul

- name: write extra configurations
  template:
    src: consul_config_custom.json.j2
    dest: "{{ consul_config_path }}/{{ item }}/config_custom.json"
    owner: "{{ consul_user }}"
    group: "{{ consul_group}}"
  when: consul_config_custom is defined
  notify:
    - restart consul

- include: ../tasks/acl.yml
  when: consul_acl_enable

- name: write systemd script
  template:
    src: consul_systemd.service.j2
    dest: /etc/systemd/system/consul.service
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd
    - restart consul

- include: ../tasks/tls.yml
  when: consul_tls_enable

- meta: flush_handlers

- name: start Consul
  service:
    name: consul
    state: started
    enabled: yes

- name: ensure Consul API is reacheable
  wait_for:
    delay: 15
    port: 8500